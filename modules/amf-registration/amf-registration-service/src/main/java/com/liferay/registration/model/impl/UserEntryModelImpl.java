/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.registration.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.registration.model.UserEntry;
import com.liferay.registration.model.UserEntryModel;
import com.liferay.registration.model.UserEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserEntry service. Represents a row in the &quot;REGIS_UserEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserEntryImpl}.
 * </p>
 *
 * @author quanhuynh
 * @see UserEntryImpl
 * @generated
 */
@JSON(strict = true)
public class UserEntryModelImpl
	extends BaseModelImpl<UserEntry> implements UserEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user entry model instance should use the <code>UserEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "REGIS_UserEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"userEntryId", Types.BIGINT}, {"homePhone", Types.VARCHAR},
		{"mobilePhone", Types.VARCHAR}, {"address1", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zipCode", Types.VARCHAR},
		{"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table REGIS_UserEntry (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,userEntryId LONG not null primary key,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,address1 VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipCode VARCHAR(75) null,userId LONG)";

	public static final String TABLE_SQL_DROP = "drop table REGIS_UserEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userEntry.userEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY REGIS_UserEntry.userEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long USERENTRYID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserEntry toModel(UserEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserEntry model = new UserEntryImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setUserEntryId(soapModel.getUserEntryId());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setAddress1(soapModel.getAddress1());
		model.setAddress2(soapModel.getAddress2());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipCode(soapModel.getZipCode());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserEntry> toModels(UserEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserEntry> models = new ArrayList<UserEntry>(soapModels.length);

		for (UserEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UserEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserEntry.class;
	}

	@Override
	public String getModelClassName() {
		return UserEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UserEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserEntry.class.getClassLoader(), UserEntry.class,
			ModelWrapper.class);

		try {
			Constructor<UserEntry> constructor =
				(Constructor<UserEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserEntry, Object>>();
		Map<String, BiConsumer<UserEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserEntry, ?>>();

		attributeGetterFunctions.put("mvccVersion", UserEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<UserEntry, Long>)UserEntry::setMvccVersion);
		attributeGetterFunctions.put("uuid", UserEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<UserEntry, String>)UserEntry::setUuid);
		attributeGetterFunctions.put("userEntryId", UserEntry::getUserEntryId);
		attributeSetterBiConsumers.put(
			"userEntryId",
			(BiConsumer<UserEntry, Long>)UserEntry::setUserEntryId);
		attributeGetterFunctions.put("homePhone", UserEntry::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone",
			(BiConsumer<UserEntry, String>)UserEntry::setHomePhone);
		attributeGetterFunctions.put("mobilePhone", UserEntry::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<UserEntry, String>)UserEntry::setMobilePhone);
		attributeGetterFunctions.put("address1", UserEntry::getAddress1);
		attributeSetterBiConsumers.put(
			"address1", (BiConsumer<UserEntry, String>)UserEntry::setAddress1);
		attributeGetterFunctions.put("address2", UserEntry::getAddress2);
		attributeSetterBiConsumers.put(
			"address2", (BiConsumer<UserEntry, String>)UserEntry::setAddress2);
		attributeGetterFunctions.put("city", UserEntry::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<UserEntry, String>)UserEntry::setCity);
		attributeGetterFunctions.put("state", UserEntry::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<UserEntry, String>)UserEntry::setState);
		attributeGetterFunctions.put("zipCode", UserEntry::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode", (BiConsumer<UserEntry, String>)UserEntry::setZipCode);
		attributeGetterFunctions.put("userId", UserEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<UserEntry, Long>)UserEntry::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUserEntryId() {
		return _userEntryId;
	}

	@Override
	public void setUserEntryId(long userEntryId) {
		_userEntryId = userEntryId;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return "";
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		_address1 = address1;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UserEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserEntryImpl userEntryImpl = new UserEntryImpl();

		userEntryImpl.setMvccVersion(getMvccVersion());
		userEntryImpl.setUuid(getUuid());
		userEntryImpl.setUserEntryId(getUserEntryId());
		userEntryImpl.setHomePhone(getHomePhone());
		userEntryImpl.setMobilePhone(getMobilePhone());
		userEntryImpl.setAddress1(getAddress1());
		userEntryImpl.setAddress2(getAddress2());
		userEntryImpl.setCity(getCity());
		userEntryImpl.setState(getState());
		userEntryImpl.setZipCode(getZipCode());
		userEntryImpl.setUserId(getUserId());

		userEntryImpl.resetOriginalValues();

		return userEntryImpl;
	}

	@Override
	public int compareTo(UserEntry userEntry) {
		long primaryKey = userEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserEntry)) {
			return false;
		}

		UserEntry userEntry = (UserEntry)object;

		long primaryKey = userEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserEntry> toCacheModel() {
		UserEntryCacheModel userEntryCacheModel = new UserEntryCacheModel();

		userEntryCacheModel.mvccVersion = getMvccVersion();

		userEntryCacheModel.uuid = getUuid();

		String uuid = userEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userEntryCacheModel.uuid = null;
		}

		userEntryCacheModel.userEntryId = getUserEntryId();

		userEntryCacheModel.homePhone = getHomePhone();

		String homePhone = userEntryCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			userEntryCacheModel.homePhone = null;
		}

		userEntryCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = userEntryCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			userEntryCacheModel.mobilePhone = null;
		}

		userEntryCacheModel.address1 = getAddress1();

		String address1 = userEntryCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			userEntryCacheModel.address1 = null;
		}

		userEntryCacheModel.address2 = getAddress2();

		String address2 = userEntryCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			userEntryCacheModel.address2 = null;
		}

		userEntryCacheModel.city = getCity();

		String city = userEntryCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			userEntryCacheModel.city = null;
		}

		userEntryCacheModel.state = getState();

		String state = userEntryCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			userEntryCacheModel.state = null;
		}

		userEntryCacheModel.zipCode = getZipCode();

		String zipCode = userEntryCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			userEntryCacheModel.zipCode = null;
		}

		userEntryCacheModel.userId = getUserId();

		return userEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _userEntryId;
	private String _homePhone;
	private String _mobilePhone;
	private String _address1;
	private String _address2;
	private String _city;
	private String _state;
	private String _zipCode;
	private long _userId;
	private long _columnBitmask;
	private UserEntry _escapedModel;

}